TODO-list for project OOLIP
---------------------------

TODO recalage:

- ajouter regularisation des fonctions

- passer en coordonnees physiques (essayer avec BF)

- 2011.01.16 ameliorer integration avec ElastiX :
    + parser les infos fournies par ElastiX
    + adapter infos ElastiX pour creer les classes Matlab correspondantes 
    
 
Interpolators 
=============
    
- 2010.06.17 passer LinearInterpolator en generique 2D/3D 

- 2010.06.17 implementer la methode resample
    - en entree un resampler, ou deux tableaux de points, ou une image
    - appliquer a ImageFunction
    - appliquer a Image (passer par un interpolateur)

- 2010.10.10 implementer re echantillonnage d'une image 3D par une coupe
    resampleSlicer(IMGFUN, PLANE, UDATA, VDATA);
    sliceResampler(IMGFUN, PLANE, UDATA, VDATA);

- 2011.07.13 ajouter une classe "ImageResampler", dans la lignee des options
    disponibles sous Elastix. Sous-classes :
    + FullResampler -> itere sur tous les pixels / voxels
    + GridResampler -> 1 pixel sur 2, 3, 4... dans chaque direction
    + RandomResampler -> 
    + RandomPointsResampler
    Passer par des itérateurs ?
    
    
Parametric transforms
=====================

- 2010.06.17 Idealement, ce serait mieux que la composition de deux transfos
    affines renvoie une transfo qui herite elle-meme de AffineTransform

- stocker des parametres de 'scaling' par defaut pour les transformations
    classiques (2010.10.12)
    + definir une 'valeur moyenne' typique, ou alors le parameterScaling 
    + definir une 'variabilite' par defaut
    
    
    
Metriques 
=========

- mieux gerer les points qui tombent en dehors des fenetres.
    avant: on calcule moyenne sur les points dans les 2 fenetres
    maintenant : on affecte une valeur par defaut
    a faire:
        + ajouter setter pour valeur par defaut (dans interpolateur)
        + gerer les points en dehors pour calculer les gradients
        
- comments gerer les points d'echantillonnage ? Pour le moment, ils sont
    stockes dans la classe, mais il serait plus juste de les transmettre
    en parametres ?
    Dans ce cas, utiliser une classe specifique pour eviter les copies de
    memoire (-> voir la classe ImageResampler)

Optimisateurs
=============

- 2010.12.03 gerer plusieurs types de condition d'arret
    + max_iter
    + precision en x
    + precision en f

- 2011.07.13 Gerer plusieurs types de décroissance de norme du gradient
    + exponentiel
    + exponentiel avec decay ajusté au nombre d'itérations
    + truc Elastix
    
- 2011.07.13 Implémenter descente de gradient avec pas adaptatif

        
Divers
======

- echantillonneurs varies :
    + plus denses au centre de l'image       
        
- 2010.06.17 implementer une classe ImageFilter (ImageToImageFilter ?)
    - methode abstraite "applyTo(Img):Img"

- think about a way to measure parameters
    + use consistent interface for returning params
    + use Table object ?
