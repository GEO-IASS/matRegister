classdef RandomPositionsSampler < ImageSampler
%RANDOMPOSITIONSSAMPLER Sample random positions within image extent
%
%   output = RandomPositionsSampler(input)
%
%   Example
%   RandomPositionsSampler
%
%   See also
%
%
% ------
% Author: David Legland
% e-mail: david.legland@grignon.inra.fr
% Created: 2011-07-20,    using Matlab 7.9.0.529 (R2009b)
% Copyright 2011 INRA - Cepia Software Platform.

%% Properties
properties
    % the base image
    image;
    
    % number of points to generate
    nPoints;
    
    % generated points
    points;
end


%% Static factory
methods (Static = true)
    function sampler = create(image, n)
        sampler = RandomPositionsSampler(image, n);
    end
end


%% Constructor
methods
    function this = RandomPositionsSampler(varargin)
        
        if nargin < 1
            return;
        end
        
        var = varargin{1};
        if isa(var, 'Image')
            % initialisation constructor
            this.image = var;
            this.nPoints = varargin{2};
            updatePoints(this);
            
        elseif isa(var, 'RandomPositionsSampler')
            % copy constructor
            this.image   = var.image;
            this.nPoints = var.nPoints;
            this.points  = var.points;
            
        end
        
    end
end


%% General methods
methods
    function n = positionNumber(this)
        % Number of positions generated by this sampler
        n = this.nPoints;
    end
    
    function points = positions(this)
        % Return the array of sampled positions
        
        points = this.points;
    end
    
    function updatePoints(this)
        
        N = this.nPoints;
        
        % image physical bounds
        box = physicalExtent(this.image);
        
        % extract box bounds
        xmin = box(1);
        xmax = box(2);
        ymin = box(3);
        ymax = box(4);
        
        % compute size of box
        dx = xmax - xmin;
        dy = ymax - ymin;
        
        % compute point coordinates
        nd = this.image.dimension;
        if nd == 2
            % 2D images
            this.points = [rand(N, 1)*dx+xmin , rand(N, 1)*dy+ymin];
            
        elseif nd == 3
            % 3D images
            zmin = box(5);
            zmax = box(6);
            dz = zmax - zmin;
            this.points = [rand(N, 1)*dx+xmin, rand(N, 1)*dy+ymin, ...
                rand(N, 1)*dz+zmin];
            
        else
            error(['Not implemented for dimension ' num2str(nd)]);
        end
        
    end
end

end